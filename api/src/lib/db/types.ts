/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string>;

export interface Games {
  created_at: Generated<Timestamp>;
  data: Json;
  id: Generated<number>;
}

export interface RoomGames {
  game_id: Generated<number>;
  room_id: string | null;
}

export interface Rooms {
  created_at: Generated<Timestamp>;
  description: string;
  id: string;
  name: string;
  status: string;
}

export interface RoomUsers {
  room_id: string | null;
  user_id: Generated<number>;
}

export interface Users {
  created_at: Generated<Timestamp>;
  email: string;
  id: Generated<number>;
  password: string;
  username: string;
}

export interface DB {
  games: Games;
  room_games: RoomGames;
  room_users: RoomUsers;
  rooms: Rooms;
  users: Users;
}
